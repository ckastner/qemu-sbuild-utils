#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-3-Clause
# Author: Christian Kastner <ckk@kvr.at>


import argparse
import os
import platform
import psutil
import sys
import textwrap


SUPPORTED_ARCHS = {
    'x86_64': 'amd64',
    'i386': 'i386'
}


MACHINE = platform.machine()
try:
    ARCH = SUPPORTED_ARCHS[MACHINE]
except KeyError as e:
    print(f'Unsupported machine type {MACHINE}')
    sys.exit(1)
OUT_FILE = '<dist>-autopkgtest-<arch>.img'
MOD_SCRIPT = '/usr/lib/qemu-sbuild-create/modscript'


def gen_sourceslist(mirror, dist, components, with_bpo=False):
    """Generate a sources.list file for the VM.

    If distribution ends with '-backports', then its base distribution will
    automatically be added.

    If distribution is 'experimental', then the 'unstable' distribution will
    automatically be added.
    """
    sl = textwrap.dedent(
        f'''\
        deb     {mirror} {dist} {' '.join(components)}
        deb-src {mirror} {dist} {' '.join(components)}
        ''')
    if dist == 'experimental':
        sl += textwrap.dedent(
            f'''
            deb     {mirror} unstable {' '.join(components)}
            deb-src {mirror} unstable {' '.join(components)}
            ''')
    elif dist.endswith('-backports'):
        sl += textwrap.dedent(
            f'''
            deb     {mirror} {dist[:-10]} {' '.join(components)}
            deb-src {mirror} {dist[:-10]} {' '.join(components)}
            ''')
    return sl


def main():
    if os.getuid() != 0:
        print('Must be root to use this.', file=sys.stderr)
        sys.exit(1)
    os.umask(22)

    parser = argparse.ArgumentParser(description='autopkgtest-build-qemu wrapper')
    parser.add_argument('--noexec', action='store_true')
    parser.add_argument('--arch', action='store', default=ARCH)
    parser.add_argument('--add-packages', action='store')
    parser.add_argument('--components', action='store', default='main')
    parser.add_argument('--variant', action='store')
    parser.add_argument('--skel', type=str, action='store')
    parser.add_argument('--size', type=str, action='store', default='10G')
    parser.add_argument('--mod-script', type=str, action='store', default=MOD_SCRIPT)
    parser.add_argument('-o', '--out-file', action='store', default=OUT_FILE)
    parser.add_argument('distribution', action='store')
    parser.add_argument('mirror', action='store')
    parsed = parser.parse_args()

    # Internal args
    if parsed.arch not in SUPPORTED_ARCHS.values():
        print(f'Unsupported architecture: {parsed.arch}')
        sys.exit(1)
    if parsed.out_file == OUT_FILE:
        # Default unchanged - peplace template with instantiated name
        out_file = f'{parsed.distribution}-autopkgtest-{parsed.arch}.img'
    else:
        out_file = parsed.out_file
    components = parsed.components.split(',')

    # Args that *may* be consumed by modscript (if supplied)
    if parsed.skel:
        os.environ['QSC_SKEL'] = parsed.skel
        print('export QSC_SKEL=' + os.environ['QSC_SKEL'])
    if parsed.add_packages:
        os.environ['QSC_ADD_PACKAGES'] = parsed.add_packages.replace(',', ' ')
        print('export QSC_ADD_PACKAGES=' + os.environ['QSC_ADD_PACKAGES'])

    # Args consumed by autopkgtest-build-qemu
    os.environ['AUTOPKGTEST_APT_SOURCES'] = gen_sourceslist(
        parsed.mirror,
        parsed.distribution,
        components,
    )
    print('sources.list (via export AUTOPKGTEST_APT_SOURCES)\n------------')
    print(os.environ['AUTOPKGTEST_APT_SOURCES'])

    args = [
        'autopkgtest-build-qemu',
	'--architecture',           parsed.arch,
        '--mirror',                 parsed.mirror,
        '--size',                   parsed.size,
    ]
    if parsed.mod_script:
        args += ['--script', parsed.mod_script]
    if parsed.variant:
        args += ['--variant', parsed.variant]
    dist = parsed.distribution
    if dist.endswith('-backports'):
        dist = dist[:-10]
    args += [
        dist,
        out_file,
    ]

    print(' '.join(str(a) for a in args))
    if not parsed.noexec:
        os.execvp(args[0], args)


if __name__ == '__main__':
    main()
